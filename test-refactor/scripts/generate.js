const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');
const { marked } = require('marked');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  contentDir: './content',
  outputDir: './dist',
  templatesDir: './templates',
  projectsDir: './projects'
};

// –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if (!fs.existsSync(config.outputDir)) {
  fs.mkdirSync(config.outputDir, { recursive: true });
}

// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
function copyStaticFiles() {
  const staticFiles = ['images', 'projects', 'favicon.ico', 'fav.png', 'fav2.ico', 'fav2.png', 'fav3.png', 'fav4.ico'];
  
  staticFiles.forEach(file => {
    const srcPath = path.join('.', file);
    const destPath = path.join(config.outputDir, file);
    
    if (fs.existsSync(srcPath)) {
      if (fs.statSync(srcPath).isDirectory()) {
        copyDir(srcPath, destPath);
      } else {
        fs.copyFileSync(srcPath, destPath);
      }
    }
  });
}

function copyDir(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (let entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

// –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Markdown —Ñ–∞–π–ª–æ–≤
function readProjects() {
  const contentFiles = fs.readdirSync(config.contentDir);
  const projects = [];

  contentFiles.forEach(file => {
    if (file.endsWith('.md')) {
      const filePath = path.join(config.contentDir, file);
      const fileContent = fs.readFileSync(filePath, 'utf8');
      const { data: frontmatter, content } = matter(fileContent);

      projects.push({
        id: path.parse(file).name,
        ...frontmatter,
        content: content.trim(),
        hasContent: content.trim().length > 0, // Project has content if Markdown body is not empty
        image: frontmatter.mainImage // Use mainImage as image for grid
      });
    }
  });

  return projects.sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É
    const yearA = a.year.includes('‚Äî') ? a.year.split('‚Äî')[0] : a.year;
    const yearB = b.year.includes('‚Äî') ? b.year.split('‚Äî')[0] : b.year;
    const monthA = a.month || '01';
    const monthB = b.month || '01';
    
    const dateA = new Date(`${yearA}-${monthA}-01`);
    const dateB = new Date(`${yearB}-${monthB}-01`);
    return dateB - dateA;
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatDate(project) {
  const month = project.month || '01';
  const year = project.year.includes('‚Äî') ? project.year.split('‚Äî')[0] : project.year;
  return `${month}/${year}`;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
function checkMissingFiles(content, projectId) {
  const fileRegex = /!\[([^\]]*)\]\(([^)]+)\)/g;
  let match;
  const missingFiles = [];
  
  while ((match = fileRegex.exec(content)) !== null) {
    const filePath = match[2];
    const fullPath = path.join('.', 'projects', projectId, filePath);
    
    if (!fs.existsSync(fullPath)) {
      missingFiles.push(filePath);
    }
  }
  
  if (missingFiles.length > 0) {
    console.log(`‚ö†Ô∏è  SOMETHING WRONG WITH FILES IN PROJECT ${projectId.toUpperCase()} (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª:`, missingFiles);
  }
  
  return missingFiles;
}

// –ß–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
function readPartials(isProjectPage = false) {
  const headerFile = isProjectPage ? 'header-project.html' : 'header.html';
  const header = fs.readFileSync(path.join(config.templatesDir, 'partials', headerFile), 'utf8');
  const footer = fs.readFileSync(path.join(config.templatesDir, 'partials', 'footer.html'), 'utf8');
  return { header, footer };
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
function generateIndex(projects) {
  const template = fs.readFileSync(path.join(config.templatesDir, 'index.html'), 'utf8');
  const { header, footer } = readPartials();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
  const projectsHTML = projects.map(project => {
    const imagePath = project.image || project.mainImage || 'images/placeholder.jpg';
    const hasLink = project.hasContent;
    const tags = project.tags || [];
    const tagsString = tags.join(',');
    const projectLink = hasLink ? `projects/${project.id}.html` : null;
    const formattedDate = formatDate(project);
    
    if (hasLink) {
      return `
  <div class="grid-item" data-tags="${tagsString}"><a href="${projectLink}"><img src="${imagePath}" alt="${project.title}"><br>${project.title}</a><br>${tags.join(', ')}<br>${formattedDate}<br><br></div>`;
    } else {
      return `
  <div class="grid-item" data-tags="${tagsString}"><img src="${imagePath}" alt="${project.title}"><br>${project.title}<br>${tags.join(', ')}<br>${formattedDate}<br><br></div>`;
    }
  }).join('\n');
  
  const html = template
    .replace('{{HEADER}}', header)
    .replace('{{FOOTER}}', footer)
    .replace('{{PROJECTS_HTML}}', projectsHTML)
    .replace('{{TOTAL_PROJECTS}}', projects.length);
  
  fs.writeFileSync(path.join(config.outputDir, 'index.html'), html);
  console.log('‚úÖ GENERATED INDEX.HTML - MAIN PAGE IS READY (‚óï‚Äø‚óï)');
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
function generateProjectPages(projects) {
  const projectTemplate = fs.readFileSync(path.join(config.templatesDir, 'project.html'), 'utf8');
  const { header, footer } = readPartials(true);
  
  if (!fs.existsSync(path.join(config.outputDir, 'projects'))) {
    fs.mkdirSync(path.join(config.outputDir, 'projects'), { recursive: true });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  const projectsWithContent = projects.filter(project => project.hasContent);
  
  projectsWithContent.forEach((project, index) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–µ–∫—Ç—ã
    const nextProject = index > 0 ? projectsWithContent[index - 1] : null; // –ë–æ–ª–µ–µ –Ω–æ–≤—ã–π (–≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ)
    const prevProject = index < projectsWithContent.length - 1 ? projectsWithContent[index + 1] : null; // –ë–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π (–Ω–∏–∂–µ –≤ —Å–ø–∏—Å–∫–µ)
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º marked –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ
    const renderer = new marked.Renderer();
    renderer.image = function(href, title, text) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
      const videoExtensions = ['.mp4', '.webm', '.ogg', '.mov', '.avi'];
      const isVideo = videoExtensions.some(ext => href.toLowerCase().endsWith(ext));
      
      if (isVideo) {
        return `<video width="1400" autoplay loop muted playsinline><source src="${href}" type="video/mp4">SOMETHING WRONG WITH VIDEO ¬Ø\\_(„ÉÑ)_/¬Ø.</video>`;
      } else {
        return `<img src="${href}" alt="${text}">`;
      }
    };
    
    marked.setOptions({
      renderer: renderer,
      breaks: true
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    checkMissingFiles(project.content, project.id);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Markdown
    const fixedContent = project.content.replace(/!\[([^\]]*)\]/g, '![]($1)');
    const contentHTML = marked(fixedContent);
    const imagePath = project.image || project.mainImage || 'images/placeholder.jpg';
    
    const tags = project.tags || [];
    const tagsString = tags.join(', ');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    const tagsLinks = tags.map(tag => 
      `<a href="../index.html?tag=${tag}">${tag}</a>`
    ).join(', ');

    const formattedDate = formatDate(project);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    let navigation = '<div class="nav-container">';
    if (nextProject) {
      navigation += `<a href="${nextProject.id}.html" class="nav-btn nav-next">‚Üê ${nextProject.title}</a>`;
    } else {
      navigation += '<div></div>'; // –ü—É—Å—Ç–æ–π div –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    }
    if (prevProject) {
      navigation += `<a href="${prevProject.id}.html" class="nav-btn nav-prev">${prevProject.title} ‚Üí</a>`;
    } else {
      navigation += '<div></div>'; // –ü—É—Å—Ç–æ–π div –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    }
    navigation += '</div>';
    
    const html = projectTemplate
      .replace('{{HEADER}}', header)
      .replace('{{FOOTER}}', footer)
      .replace(/{{TITLE}}/g, project.title)
      .replace(/{{TAGS}}/g, tagsString)
      .replace(/{{TAGS_LINKS}}/g, tagsLinks)
      .replace(/{{YEAR}}/g, formattedDate)
      .replace(/{{MAIN_IMAGE}}/g, imagePath)
      .replace(/{{CONTENT}}/g, contentHTML)
      .replace(/{{NAVIGATION}}/g, navigation);
    
    const outputPath = path.join(config.outputDir, 'projects', `${project.id}.html`);
    fs.writeFileSync(outputPath, html);
    console.log(`‚úÖ GENERATED PROJECTS/${project.id.toUpperCase()}.HTML - ANOTHER PAGE DONE (ÔΩ°‚óï‚Äø‚óïÔΩ°)`);
  });
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSS
function generateCSS() {
  const css = fs.readFileSync(path.join(config.templatesDir, 'styles.css'), 'utf8');
  fs.writeFileSync(path.join(config.outputDir, 'styles.css'), css);
  console.log('‚úÖ GENERATED STYLES.CSS - LOOKING GOOD (‚ó° ‚Äø ‚ó°)');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function build() {
  console.log('üöÄ BUILDING PORTFOLIO... HOPE IT WORKS (‡∏á ‚Ä¢ÃÄ_‚Ä¢ÃÅ)‡∏á');
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  copyStaticFiles();
  
  // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
  const projects = readProjects();
  console.log(`üìÅ FOUND ${projects.length} PROJECTS - NOT BAD ( Õ°¬∞ Õú ñ Õ°¬∞)`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  generateIndex(projects);
  generateProjectPages(projects);
  generateCSS();
  
  console.log('‚ú® BUILD COMPLETE! EVERYTHING SHOULD WORK NOW (Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
if (require.main === module) {
  build();
}

module.exports = { build, readProjects };

